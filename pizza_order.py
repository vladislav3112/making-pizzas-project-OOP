from time import sleep
import click
from random import randint
import sys
from typing import Union, Callable


def str_to_class(str: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∏—Ü—Ü—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ –≤ –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞"""
    return getattr(sys.modules[__name__], str.title())


def log(msg: str):
    """–í—ã–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–∏–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–∏–Ω–∏–º–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω"""

    def _log(func: Callable):
        def wrapper(pizza: Pizza):
            attr = func.__name__ + "time"
            f_time = getattr(pizza, attr)
            sleep(f_time)
            print(msg.format(f_time))

        return wrapper

    return _log


@click.group()
def cli():
    pass


@cli.command()
def menu():
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é"""
    print(
        "‚Äî Margherita üßÄ : tomato sauce, mozzarella, tomatoes\n‚Äî Pepperoni üçï : tomato sauce, mozzarella, pepperoni\n‚Äî Hawaiian üçç : tomato sauce, mozzarella, chicken, pineapples"
    )


class Recipe:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
    ‚Äî –º–µ—Ç–æ–¥ dict() –≤—ã–≤–æ–¥–∏—Ç —Ä–µ—Ü–µ–ø—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
    """

    pizza_name: str
    recipe: list

    def __init__(self, pizza_name, recipe_list) -> None:
        self.pizza_name = pizza_name
        self.recipe_list = recipe_list


class Pizza:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–∏—Ü—Ü:
    - bake_time, delivery_time –∏ pickup_time –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏, –¥–æ—Å—Ç–∞–≤–∫–∏, —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
    - –ü—Ä–∏ –∑–∞–¥–∞–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ XL –ø–∏—Ü—Ü–∞ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –Ω–∞ 2 —Å–µ–∫ –¥–æ–ª—å—à–µ
    - –†–µ—Ü–µ–ø—Ç –ø–∏—Ü—Ü—ã –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã, —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
    """

    name: str
    size: str
    emoji: str
    recipe: Recipe
    recipe_list: list

    bake_time = randint(1, 5)
    delivery_time = randint(1, 4)
    pickup_time = randint(1, 4)

    def __init__(self, size="L") -> None:
        self.size = size
        if size == "XL":
            self.bake_time += 2
        name = type(self).__name__ + " " + self.emoji
        self.recipe = Recipe(name, self.recipe_list)


class Margherita(Pizza):
    recipe_list = ["tomato sauce", "mozzarella", "tomatoes"]
    emoji = "üßÄ"


class Pepperoni(Pizza):
    recipe_list = ["tomato sauce", "mozzarella", "pepperoni"]
    emoji = "üçï"


class Hawaiian(Pizza):
    recipe_list = ["tomato sauce", "mozzarella", "chicken", "pineapples"]
    emoji = "üçç"


@log("Û∞≥è –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ {}—Å!")
def bake_(pizza: Pizza):
    """–ì–æ—Ç–æ–≤–∏—Ç –ø–∏—Ü—Ü—É"""
    pass


@log("üõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ {}—Å!")
def delivery_(pizza: Pizza):
    """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""
    pass


@log("üè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞ {}—Å!")
def pickup_(pizza: Pizza):
    """–°–∞–º–æ–≤—ã–≤–æ–∑"""
    pass


@cli.command()
@click.option("--delivery", default=False, is_flag=True)
@click.option("--pickup", default=False, is_flag=True)
@click.argument("pizza", nargs=1)
def order(pizza: Union[str, Pizza], delivery: bool, pickup: bool):
    """–ì–æ—Ç–æ–≤–∏—Ç –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""
    if isinstance(pizza, str):
        pizza_obj = str_to_class(pizza.title())
    else:
        pizza_obj = pizza
    bake_(pizza_obj)
    if delivery:
        delivery_(pizza_obj)
    if pickup:
        pickup_(pizza_obj)


if __name__ == "__main__":
    cli()
